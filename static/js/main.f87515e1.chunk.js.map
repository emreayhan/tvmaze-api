{"version":3,"sources":["store/actions/movieActions.js","components/list.jsx","store/actions/movieDetailActions.js","components/details.jsx","components/about.jsx","store/reducers/index.js","store/reducers/movieReducer.js","store/reducers/movieDetailReducer.js","axios/tvmazeApi.js","store/effects/getMovieDataEffects.js","store/effects/getMovieDetailDataEffects.js","store/effects/index.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["REQUEST_DATA","RECEIVE_DATA","List","state","data","this","props","requestMovieData","response","then","res","_this2","setState","react_default","a","createElement","className","map","el","key","show","id","react_router_dom","to","concat","exact","style","padding","width","height","src","image","medium","alt","name","Component","connect","dispatch","type","REQUEST_DETAIL_DATA","RECEIVE_DETAIL_DATA","Details","rating","summary","requestMovieDetailsData","console","log","detailsResponse","replace","premiered","average","payload","match","params","about","combineReducers","arguments","length","undefined","_ref","axios","create","baseURL","getData","loadData","regenerator_default","wrap","_context","prev","next","fetchData","get","q","put","t0","stop","_marked","_context2","takeLatest","_marked2","getDetailData","LoadDetailData","action","getMovieDetailDataEffects_marked","getMovieDetailDataEffects_marked2","rootSaga","all","fork","movieSaga","movieDetailSaga","effects_marked","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","applyMiddleware","run","App","es","react_router","path","component","About","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f87515e1.chunk.js","sourcesContent":["export const REQUEST_DATA = \"REQUEST_DATA\";\nexport const RECEIVE_DATA = \"RECEIVE_DATA\";\n\nexport const requestData = () => ({ type: REQUEST_DATA });\nexport const receiveData = data => ({ type: RECEIVE_DATA, data });\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { requestData } from \"../store/actions/movieActions\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./list.scss\";\nclass List extends Component {\n  state = {\n    data: []\n  };\n\n  async componentDidMount() {\n    await this.props.requestMovieData();\n    await this.props.response.then(res => this.setState({ data: res.data }));\n  }\n\n  render() {\n    return (\n      <div className=\"list\">\n        {this.state.data.map(el => (\n          <li key={el.show.id}>\n            <NavLink className=\"link\" to={`${el.show.id}`} exact>\n              <div\n                style={{\n                  padding: \"10px\"\n                }}\n              >\n                <img\n                  width=\"80\"\n                  height=\"80\"\n                  src={`${el.show.image.medium}`}\n                  alt=\"el.show.name\"\n                />\n                <span className=\"spanForName\">{el.show.name}</span>\n              </div>\n            </NavLink>\n          </li>\n        ))}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({ response: state.response });\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    requestMovieData: () => {\n      dispatch(requestData());\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(List);\n","export const REQUEST_DETAIL_DATA = \"REQUEST_DETAIL_DATA\";\nexport const RECEIVE_DETAIL_DATA = \"RECEIVE_DETAIL_DATA\";\n\nexport const requestDetailData = payload => ({\n  type: REQUEST_DETAIL_DATA,\n  payload\n});\nexport const receiveDetailData = data => ({\n  type: RECEIVE_DETAIL_DATA,\n  data\n});\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { requestDetailData } from \"../store/actions/movieDetailActions\";\nimport \"./details.scss\";\nclass Details extends Component {\n  state = {\n    data: {},\n    image: {},\n    rating: {},\n    summary: \"\"\n  };\n\n  async componentWillMount() {\n    await this.props.requestMovieDetailsData();\n    console.log(this.props.detailsResponse, \"res\");\n    await this.props.detailsResponse.then(res =>\n      this.setState({\n        data: res.data,\n        image: res.data.image,\n        rating: res.data.rating,\n        summary: res.data.summary.replace(/(<([^>]+)>)/gi, \"\")\n      })\n    );\n  }\n  render() {\n    return (\n      <div className=\"details\">\n        <div className=\"header\">\n          <span>{this.state.data.name}</span>({this.state.data.premiered})\n        </div>\n\n        <div className=\"rate\">\n          {this.state.rating.average}\n          <span> ⭐️ </span>\n        </div>\n\n        <img src={`${this.state.image.medium}`} />\n        <div className=\"summary\">{this.state.summary}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({ detailsResponse: state.detailsResponse });\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    requestMovieDetailsData: () => {\n      dispatch(requestDetailData(props.match.params.id));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Details);\n","import React, { Component } from \"react\";\nimport \"./about.scss\";\nclass about extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"about\">\n        <blockquote>\n          <p>\"I am vengeance, I am the night, I am Batman!\"</p>\n          <footer>— Batman</footer>\n        </blockquote>\n        Batman has been Gotham's protector for decades, CEO of Wayne\n        Enterprises, Patriarch of the Bat Family and veteran member of the\n        Justice League. Batman is a superhero co-created by artist Bob Kane and\n        writer Bill Finger and published by DC Comics. The character made his\n        first appearance in Detective Comics #27 (May, 1939). Batman is the\n        secret identity of Bruce Wayne. Witnessing the murder of his parents as\n        a child leads him to train himself to physical and intellectual\n        perfection and don a bat-themed costume in order to fight crime. Batman\n        operates in Gotham City, assisted by various supporting characters\n        including his sidekick Robin and his butler Alfred Pennyworth, and\n        fights an assortment of villains influenced by the characters' roots in\n        film and pulp magazines. Unlike most superheroes, he does not possess\n        any superpowers; he makes use (to the best that he can) of intellect,\n        detective skills, science and technology, wealth, physical prowess, and\n        intimidation in his war on crime.\n      </div>\n    );\n  }\n}\n\nexport default about;\n","import { combineReducers } from \"redux\";\nimport response from \"./movieReducer\";\nimport detailsResponse from \"./movieDetailReducer\";\n\nexport default combineReducers({\n  response,\n  detailsResponse\n});\n","import { RECEIVE_DATA } from \"../actions/movieActions\";\n\nexport default (state = [], { type, response }) => {\n  switch (type) {\n    case RECEIVE_DATA:\n      return response;\n    default:\n      return state;\n  }\n};\n","import { RECEIVE_DETAIL_DATA } from \"../actions/movieDetailActions\";\n\nexport default (state = [], { type, detailsResponse }) => {\n  switch (type) {\n    case RECEIVE_DETAIL_DATA:\n      return detailsResponse;\n    default:\n      return state;\n  }\n};\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://api.tvmaze.com/\"\n});\n","import { put, takeLatest } from \"redux-saga/effects\";\nimport { REQUEST_DATA, RECEIVE_DATA } from \"../actions/movieActions\";\nimport fetchData from \"../../axios/tvmazeApi\";\n\nfunction* getData() {\n  try {\n    const response = fetchData.get(`search/shows/?`, {\n      params: {\n        q: \"batman\"\n      }\n    });\n    yield put({ type: RECEIVE_DATA, response });\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport default function* loadData() {\n  yield takeLatest(REQUEST_DATA, getData);\n}\n","import { put, takeLatest } from \"redux-saga/effects\";\nimport {\n  REQUEST_DETAIL_DATA,\n  RECEIVE_DETAIL_DATA\n} from \"../actions/movieDetailActions\";\nimport fetchData from \"../../axios/tvmazeApi\";\n\nfunction* getDetailData(action) {\n  try {\n    const detailsResponse = fetchData.get(`shows/${action.payload}`);\n    console.log(detailsResponse, \"details\");\n    yield put({ type: RECEIVE_DETAIL_DATA, detailsResponse });\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport default function* LoadDetailData() {\n  yield takeLatest(REQUEST_DETAIL_DATA, getDetailData);\n}\n","import { all, fork } from \"redux-saga/effects\";\n\nimport movieSaga from \"./getMovieDataEffects\";\nimport movieDetailSaga from \"./getMovieDetailDataEffects\";\n\nexport default function* rootSaga() {\n  yield all([fork(movieSaga), fork(movieDetailSaga)]);\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport reducer from \"./reducers\";\nimport rootSaga from \"./effects\";\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n// mount it on the Store\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\n// then run the saga\nsagaMiddleware.run(rootSaga);\n\n// render the application\nexport default store;\n","import React from \"react\";\nimport \"./App.scss\";\nimport List from \"./components/list\";\nimport Details from \"./components/details\";\nimport About from \"./components/about\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { NavLink } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <nav>\n          <NavLink className=\"navLink\" to=\"https://emreayhan.github.io/tvmaze-api/\" exact>\n            Home\n          </NavLink>\n          <NavLink className=\"navLink\" to=\"https://emreayhan.github.io/tvmaze-api/about\">\n            About\n          </NavLink>\n        </nav>\n        <Switch>\n          <Route exact path=\"https://emreayhan.github.io/tvmaze-api/\" component={List} />\n          <Route exact path=\"https://emreayhan.github.io/tvmaze-api/about\" component={About} />\n          <Route exact path=\"https://emreayhan.github.io/tvmaze-api/:id\" component={Details} />\n        </Switch>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}